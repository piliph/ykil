/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.yaacoubi.klinkhammer;

import java.awt.Component;
import java.awt.event.*;
import java.io.File;

import javax.swing.*;
import javax.swing.event.*;

import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.layers.*;
import gov.nasa.worldwind.layers.Earth.*;
import gov.nasa.worldwind.util.StatusBar;
import gov.nasa.worldwindx.examples.LayerPanel;
import gov.nasa.worldwindx.examples.util.ScreenShotAction;

/**
 *
 * @author m.yaacoubi
 */
public class YKILUI extends JFrame
{
    /**
	 * 
	 */
	private static final long serialVersionUID = -3522288446387693404L;
	private DisplayManager displayman;
    private int dividerLocation = 200;
    protected WorldWindowGLCanvas map = null;
    /**
     * Creates new form MPImageLocatorUI
     */
    public YKILUI()
    {
        //  This line is neccessary due to the fact that the MapCanvas overlaps the MenuBar.
        //  Must be called before using Menus.
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        
        //  General Initialize Method, to initialize Components
        initComponents();

        //  Set the Program Icon of this Application
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/ykil.png")));
        
        //  Initialize Display Manager to manage Fullscreen Possibilities
        displayman = new DisplayManager(this);
    }

    private String capitalize(String line)
    {
        return Character.toUpperCase(line.charAt(0)) + line.substring(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {
    	fileTree 					= new FileTreePanel();
    	stringModel 				= new DefaultListModel<String>();
    	statusBar					= new StatusBar();
        saveDialog 					= new JDialog();
        fileChooser					= new JFileChooser();
        panelNorth 					= new JPanel();
        splitPaneMapFileExplorer	= new JSplitPane();
        panelMap 					= new JPanel();
        panelFileExplorer			= new JPanel();
        scrollPaneSelectedItems		= new JScrollPane();
        listSelectedItems 			= new JList<String>(stringModel);
        panelSouth 					= new JPanel();
        buttonShowOnMap 			= new JButton();
        buttonExportImg 			= new JButton();
        buttonExportGPSData 		= new JButton();
        buttonAddImgToList 			= new JButton();
        buttonRemImgFromList 		= new JButton();
        buttonRefreshFileExplorer 	= new JButton();
        menuBar 					= new JMenuBar();
        menuFile 					= new JMenu();
        menuSettings				= new JMenu();
        menuFileExit 				= new JMenuItem();
        menuSettingsStatusBar		= new JRadioButtonMenuItem();
        menuSettingsLayerPanel		= new JRadioButtonMenuItem();
        menuSettingsGraticuleLayer	= new JMenu();
        menuSettingsNoGL			= new JRadioButtonMenuItem();
        menuSettingsLLGL			= new JRadioButtonMenuItem();
        menuSettingsMGRSGL			= new JRadioButtonMenuItem();
        menuSettingsUTMGL			= new JRadioButtonMenuItem();
        menuSettingsUTMBGL			= new JRadioButtonMenuItem();
        menuView 					= new JMenu();
        menuItemFullscreen 			= new JRadioButtonMenuItem();
        menuItemFullscreenX 		= new JRadioButtonMenuItem();
        jSeparator1 				= new JPopupMenu.Separator();
        menuViewDesign 				= new JMenu();
        menuHelp 					= new JMenu();
        menuHelpOnlineSupport 		= new JMenuItem();
        menuHelpReportIssue 		= new JMenuItem();
        menuHelpAbout 				= new JMenuItem();
        about						= new About();

        saveDialog.setBounds(new java.awt.Rectangle(0, 0, 250, 200));
        saveDialog.getContentPane().add(fileChooser, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("YKIL - Yaacoubi Klinkhammer Image Locator");
        setMinimumSize(new java.awt.Dimension(900, 450));
        setName("mainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 450));
        addComponentListener(new ComponentAdapter()
        {
            public void componentResized(ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });

        panelNorth.setLayout(new java.awt.BorderLayout());

        splitPaneMapFileExplorer.setDividerLocation(getWidth()-dividerLocation);
        splitPaneMapFileExplorer.setResizeWeight(1.0);
        splitPaneMapFileExplorer.setToolTipText("");
        splitPaneMapFileExplorer.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                splitPaneMapFileExplorerPropertyChange(evt);
            }
        });

        panelMap.setMinimumSize(new java.awt.Dimension(72, 200));
        panelMap.setName(""); // NOI18N
        panelMap.setLayout(new java.awt.BorderLayout());
        splitPaneMapFileExplorer.setLeftComponent(panelMap);
        try {
        	map = Logik.getMap();
        }
        catch(java.lang.UnsatisfiedLinkError ex)
        {
        	checkLibs();
        }

        if(map != null)
        {
        	layerPanel = new LayerPanel(map);
        	layerPanel.setVisible(false);
        	panelMap.add(map, java.awt.BorderLayout.CENTER);
        	panelMap.add(layerPanel, java.awt.BorderLayout.WEST);
        	statusBar.setEventSource(map);
        	statusBar.setVisible(false);
        	panelMap.add(statusBar, java.awt.BorderLayout.PAGE_END);
        }

        panelFileExplorer.setLayout(new java.awt.BorderLayout());

        listSelectedItems.addListSelectionListener(new ListSelectionListener() {

			public void valueChanged(ListSelectionEvent e)
			{
				boolean minOneSelected = listSelectedItems.getSelectedIndices().length > 0;
				buttonShowOnMap.setEnabled(minOneSelected);
				buttonExportGPSData.setEnabled(minOneSelected);
				buttonRemImgFromList.setEnabled(minOneSelected);
			}
		});

        scrollPaneSelectedItems.setViewportView(listSelectedItems);

        fileTree.addTreeSelectionListener(new TreeSelectionListener() {
			public void valueChanged(TreeSelectionEvent e)
			{
				buttonAddImgToList.setEnabled(fileTree.getSelectionCount() > 0);
			}
		});
        panelFileExplorer.add(fileTree, java.awt.BorderLayout.CENTER);
        panelFileExplorer.add(scrollPaneSelectedItems, java.awt.BorderLayout.PAGE_END);

        splitPaneMapFileExplorer.setRightComponent(panelFileExplorer);

        panelNorth.add(splitPaneMapFileExplorer, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelNorth, java.awt.BorderLayout.CENTER);

        panelSouth.setLayout(new java.awt.GridLayout(1, 0));

        buttonShowOnMap.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonShowOnMap.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/locate.png"))); // NOI18N
        buttonShowOnMap.setText("Locate");
        buttonShowOnMap.setEnabled(false);
        buttonShowOnMap.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                buttonShowOnMapActionPerformed(evt);
            }
        });
        panelSouth.add(buttonShowOnMap);

        buttonExportImg.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonExportImg.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/map.png"))); // NOI18N
        buttonExportImg.setText("Export Map");
        buttonExportImg.addActionListener(new ScreenShotAction((WorldWindowGLCanvas)panelMap.getComponents()[0]));
        panelSouth.add(buttonExportImg);

        buttonExportGPSData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonExportGPSData.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/gps.png"))); // NOI18N
        buttonExportGPSData.setText("Export GPS");
        buttonExportGPSData.setEnabled(false);
        buttonExportGPSData.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                buttonExportGPSDataActionPerformed(evt);
            }
        });
        panelSouth.add(buttonExportGPSData);

        buttonAddImgToList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonAddImgToList.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/add.png"))); // NOI18N
        buttonAddImgToList.setText("Add To List");
        buttonAddImgToList.setEnabled(false);
        buttonAddImgToList.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
            	buttonAddImgToListActionPerformed(evt);
            }
        });
        panelSouth.add(buttonAddImgToList);

        buttonRemImgFromList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonRemImgFromList.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/del.png"))); // NOI18N
        buttonRemImgFromList.setText("Remove");
        buttonRemImgFromList.setEnabled(false);
        buttonRemImgFromList.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				java.util.List<String> list = listSelectedItems.getSelectedValuesList();
				if(list != null)
				{
					for(String str : list)
						stringModel.removeElement(str);
				}
			}
		});
        panelSouth.add(buttonRemImgFromList);

        buttonRefreshFileExplorer.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonRefreshFileExplorer.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/refresh.png"))); // NOI18N
        buttonRefreshFileExplorer.setText("Refresh");
        buttonRefreshFileExplorer.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
            	buttonRefreshFileExplorerActionPerformed(evt);
            }
        });
        panelFileExplorer.add(buttonRefreshFileExplorer, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(panelSouth, java.awt.BorderLayout.SOUTH);

        menuFile.setText("File");
        menuFile.setMnemonic('F');
        menuFile.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/file.png")));

        menuFileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0));
        menuFileExit.setText("Exit");
        menuFileExit.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/exit.png")));
        menuFileExit.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileExit);

        menuBar.add(menuFile);

        menuSettings.setText("Settings");
        menuSettings.setMnemonic('S');
        menuSettings.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/settings.png")));

        menuSettingsStatusBar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
        menuSettingsStatusBar.setText("Statusbar");
        menuSettingsStatusBar.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/status.png")));
        menuSettingsStatusBar.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
            	menuSettingsStatusBarActionPerformed(evt);
            }
        });
        menuSettings.add(menuSettingsStatusBar);

        menuSettingsLayerPanel.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.CTRL_MASK));
        menuSettingsLayerPanel.setText("Layer Panel");
        menuSettingsLayerPanel.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/layerpanel.png")));
        menuSettingsLayerPanel.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
            	layerPanel.setVisible(menuSettingsLayerPanel.isSelected());
            }
        });
        menuSettings.add(menuSettingsLayerPanel);

        menuSettingsGraticuleLayer.setText("Graticule Layer");
        menuSettingsGraticuleLayer.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/graticulelayer.png")));

        ButtonGroup bg = new ButtonGroup();

        menuSettingsNoGL.setText("None");
        menuSettingsNoGL.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent evt){ setGraticuleLayer(null); }});
        menuSettingsNoGL.setSelected(true);
        bg.add(menuSettingsNoGL);
        menuSettingsGraticuleLayer.add(menuSettingsNoGL);
        
        menuSettingsLLGL.setText("Latitude Longitude");
        menuSettingsLLGL.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent evt){ setGraticuleLayer(new LatLonGraticuleLayer()); }});
        bg.add(menuSettingsLLGL);
        menuSettingsGraticuleLayer.add(menuSettingsLLGL);
        
        menuSettingsMGRSGL.setText("Military grid reference system");
        menuSettingsMGRSGL.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent evt){ setGraticuleLayer(new MGRSGraticuleLayer()); }});
        bg.add(menuSettingsMGRSGL);
        menuSettingsGraticuleLayer.add(menuSettingsMGRSGL);
        
        menuSettingsUTMGL.setText("Universal Transverse Mercator");
        menuSettingsUTMGL.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent evt){ setGraticuleLayer(new UTMGraticuleLayer()); }});
        bg.add(menuSettingsUTMGL);
        menuSettingsGraticuleLayer.add(menuSettingsUTMGL);
        
        menuSettingsUTMBGL.setText("Universal Transverse Mercator Base");
        menuSettingsUTMBGL.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent evt){ setGraticuleLayer(new UTMBaseGraticuleLayer()); }});
        bg.add(menuSettingsUTMBGL);
        menuSettingsGraticuleLayer.add(menuSettingsUTMBGL);

        menuSettings.add(menuSettingsGraticuleLayer);

        menuBar.add(menuSettings);

        menuView.setText("View");
        menuView.setMnemonic('V');
        menuView.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/view.png")));
        menuView.addMenuListener(new MenuListener()
        {
            public void menuCanceled(MenuEvent evt)
            {
            }
            public void menuDeselected(MenuEvent evt)
            {
            }
            public void menuSelected(MenuEvent evt)
            {
                menuViewMenuSelected(evt);
            }
        });

        menuItemFullscreen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0));
        menuItemFullscreen.setText("Fullscreen");
        menuItemFullscreen.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/fullscreen.png")));
        menuItemFullscreen.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                menuItemFullscreenActionPerformed(evt);
            }
        });
        menuView.add(menuItemFullscreen);

        menuItemFullscreenX.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0));
        menuItemFullscreenX.setText("Fullscreen Extended");
        menuItemFullscreenX.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/fullscreen.png")));
        menuItemFullscreenX.setEnabled(DisplayManager.countDisplays() > 1);
        menuItemFullscreenX.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                menuItemFullscreenXActionPerformed(evt);
            }
        });
        menuView.add(menuItemFullscreenX);
        menuView.add(jSeparator1);

        menuViewDesign.setText("Design");
        menuViewDesign.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/design.png")));

        setDesigns();

        menuView.add(menuViewDesign);

        menuBar.add(menuView);

        menuHelp.setText("Help");
        menuHelp.setMnemonic('H');
        menuHelp.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/help.png")));

        menuHelpOnlineSupport.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
        menuHelpOnlineSupport.setText("Online Help and Support");
        menuHelpOnlineSupport.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/support.png"))); // NOI18N
        menuHelpOnlineSupport.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                menuHelpOnlineSupportActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpOnlineSupport);

        menuHelpReportIssue.setText("Report an Issue");
        menuHelpReportIssue.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/email.png")));
        menuHelpReportIssue.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                menuHelpReportIssueActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpReportIssue);

        menuHelpAbout.setText("About");
        menuHelpAbout.setIcon(new ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/about.png"))); // NOI18N
        menuHelpAbout.addActionListener(new ActionListener()
        {	
			public void actionPerformed(ActionEvent evt)
			{
				menuHelpAboutActionPerformed(evt);
			}
		});
        menuHelp.add(menuHelpAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        setSize(new java.awt.Dimension(931, 488));
        setLocationRelativeTo(null);
    }// </editor-fold>   

    private void setGraticuleLayer(AbstractGraticuleLayer glayer)
    {
    	LayerList ll = map.getModel().getLayers();
        for(Layer l : ll)
        	if(l instanceof AbstractGraticuleLayer)
        		map.getModel().getLayers().remove(l);
        if(glayer != null) map.getModel().getLayers().add(glayer);
    }

    private void formComponentResized(ComponentEvent evt)                                      
    {                                          
        splitPaneMapFileExplorer.setDividerLocation(getWidth()-dividerLocation);
    }                                     

    private void splitPaneMapFileExplorerPropertyChange(java.beans.PropertyChangeEvent evt)                                                        
    {                                                            
        dividerLocation = getWidth()-splitPaneMapFileExplorer.getDividerLocation();
    }
    
    private void menuSettingsStatusBarActionPerformed(ActionEvent evt)                                                   
    {                                                       
    	statusBar.setVisible(menuSettingsStatusBar.isSelected());
    }                                 

    private void menuItemFullscreenActionPerformed(ActionEvent evt)                                                   
    {                                                       
        displayman.toggleFullscreen();
        menuItemFullscreenX.setSelected(displayman.isFullscreenX());
    }                                                  

    private void menuItemFullscreenXActionPerformed(ActionEvent evt)                                                    
    {                                                        
        displayman.toggleFullscreenX();
        menuItemFullscreen.setSelected(displayman.isFullscreen());
    }                                                   

    private void menuItemExitActionPerformed(ActionEvent evt)                                             
    {                                                 
        if(displayman.isFullscreen() || displayman.isFullscreenX())
        {
            if(displayman.isFullscreen())
            {
            	displayman.toggleFullscreen();
            	menuItemFullscreen.setSelected(false);
            }
            else
            {
            	displayman.toggleFullscreenX();
            	menuItemFullscreenX.setSelected(false);
            }
        }
        else
        {
            int answer = JOptionPane.showConfirmDialog(this, "Are you sure that you want to exit YKIL?", "Exit YKIL", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(answer == JOptionPane.YES_OPTION)
                System.exit(0);
        }
    }                                            

    private void menuViewMenuSelected(MenuEvent evt)                                      
    {                                          
        boolean moreThanOne = DisplayManager.countDisplays() > 1;
        if(!menuItemFullscreenX.isEnabled() && moreThanOne) displayman.refreshDisplays();
        menuItemFullscreenX.setEnabled(moreThanOne);
        if(!moreThanOne) menuItemFullscreenX.setToolTipText("You need more than one monitor for this option.");
    }                                     

    private void menuHelpReportIssueActionPerformed(ActionEvent evt)                                                    
    {                                                        
    	Browser.goTo("http://klinkhammer.yaacoubi.com/report");
    }

    private void menuHelpAboutActionPerformed(ActionEvent evt)                                                    
    {                                                        
    	about.setVisible(true);
    }

    private void menuHelpOnlineSupportActionPerformed(ActionEvent evt)                                                      
    {                                                          
        Browser.goTo("http://klinkhammer.yaacoubi.com");
    }                                                     

    private void buttonExportGPSDataActionPerformed(ActionEvent evt)                                                    
    {                                                        
        int returnval = fileChooser.showSaveDialog(this);
        if(returnval == JFileChooser.APPROVE_OPTION)
            Logik.exportEXIF(listSelectedItems.getSelectedValuesList(), fileChooser.getSelectedFile());
    }

    private void buttonAddImgToListActionPerformed(ActionEvent evt)                                                
    {                                                    
    	File[] paths = fileTree.getValidSelectedImagesPaths();
		for(File file : paths)
			stringModel.addElement(file.getPath());
    }

    private void buttonRefreshFileExplorerActionPerformed(ActionEvent evt)
    {                                                    
    	for(Component c : panelFileExplorer.getComponents())
    		if(c instanceof FileTreePanel)
    			panelFileExplorer.remove(c);
    	fileTree = new FileTreePanel();
    	fileTree.addTreeSelectionListener(new TreeSelectionListener() {public void valueChanged(TreeSelectionEvent e){buttonAddImgToList.setEnabled(fileTree.getSelectionCount() > 0);}});
    	panelFileExplorer.add(fileTree, java.awt.BorderLayout.CENTER);
    	panelFileExplorer.revalidate();
    	panelFileExplorer.repaint();
    }

    private void buttonShowOnMapActionPerformed(ActionEvent evt)                                                
    {                                                    
        Logik.addAnnotations(listSelectedItems.getSelectedValuesList(), this);
    }                                               

    public static void message(String title, String msg)
    {
        JOptionPane.showMessageDialog(null,msg,title, JOptionPane.DEFAULT_OPTION);
    }

    private void setDesigns()
    {
        ButtonGroup bg = new ButtonGroup();
    	JRadioButtonMenuItem tmp;   
        for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
        {
            tmp = new JRadioButtonMenuItem();
            tmp.setSelected(UIManager.getLookAndFeel().getName().equals(info.getName()));
            tmp.setText(info.getName());
            tmp.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent evt)
                {
                    menuItemDesignActionPerformed(evt);
                }
            });
            bg.add(tmp);
            menuViewDesign.add(tmp);
        }
    }
    
    private void menuItemDesignActionPerformed(ActionEvent evt)                                                      
    {
        try {
            
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if (evt.getActionCommand().equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    SwingUtilities.updateComponentTreeUI(this);
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
        	java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(InstantiationException ex) {
        	java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(IllegalAccessException ex) {
        	java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    } 

    private void checkLibs()
    {
    	boolean win = System.getProperty("os.name").toLowerCase().contains("windows");
        String fs = System.getProperty("file.separator");
        String[] bins = {"gluegen-rt","jogl","jogl_awt","jogl_cg"};
        java.io.File f = null;
        String binpath = win?(System.getProperty("java.home")+fs+"bin"+fs):"/usr/lib/";
        String binWord = win?"binaries":"libraries";
        String result = "Following " + binWord + " are missing:\n\n";
        String binurl = "http://klinkhammer.yaacoubi.com/lib/" + (win?"win":"unix");
        String tmpFile = "";
        boolean missing = false;
        for(String bin : bins)
        {
            tmpFile  = win?"":"lib";
            tmpFile += bin+".";
            tmpFile += win?"dll":"so";
            f = new java.io.File(binpath+tmpFile);
            if(!f.exists())
            {
                    missing = true;
                    result += " - " + tmpFile + "\n";
            }
        }
        result += "\nYou can download all the necessary " + binWord + " at:\n\n"+binurl+"\n\nAfter downloading your needed " + binWord + ", make sure to copy them to the following path:\n\n" + binpath;
        if(missing)
        {
            message(capitalize(binWord) + " missing", result);
            Browser.goTo(binurl);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
        	java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(InstantiationException ex) {
        	java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(IllegalAccessException ex) {
        	java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try{
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run()
            {
                new SplashScreen().initUI();
            }
        });
        }
        catch(Error er)
        {
        	message("Unexpected Exception occurred", "Error Message:\n\n" + er.getMessage());
        }
        catch(Exception ex)
        {
        	message("Unexpected Exception occurred", "Exception Message:\n\n" + ex.getMessage());
        }
    }

    // Variables declaration - do not modify                     
    private FileTreePanel fileTree;
    private DefaultListModel<String> stringModel;
    private LayerPanel layerPanel;
    private StatusBar statusBar;
    private JButton buttonAddImgToList;
    private JButton buttonExportGPSData;
    private JButton buttonExportImg;
    private JButton buttonRemImgFromList;
    private JButton buttonShowOnMap;
    private JButton buttonRefreshFileExplorer;
    private JFileChooser fileChooser;
    private JPopupMenu.Separator jSeparator1;
    private JList<String> listSelectedItems;
    private JMenuBar menuBar;
    private JMenu menuFile;
    private JMenu menuSettings;
    private JMenu menuHelp;
    private JMenuItem menuHelpAbout;
    private JMenuItem menuHelpOnlineSupport;
    private JMenuItem menuHelpReportIssue;
    private JMenuItem menuFileExit;
    private JRadioButtonMenuItem menuSettingsStatusBar;
    private JRadioButtonMenuItem menuSettingsLayerPanel;
    private JMenu menuSettingsGraticuleLayer;
    private JRadioButtonMenuItem menuSettingsNoGL;
    private JRadioButtonMenuItem menuSettingsLLGL;
    private JRadioButtonMenuItem menuSettingsMGRSGL;
    private JRadioButtonMenuItem menuSettingsUTMGL;
    private JRadioButtonMenuItem menuSettingsUTMBGL;
    private JRadioButtonMenuItem menuItemFullscreen;
    private JRadioButtonMenuItem menuItemFullscreenX;
    private JMenu menuView;
    private JMenu menuViewDesign;
    private JPanel panelFileExplorer;
    private JPanel panelMap;
    private JPanel panelNorth;
    private JPanel panelSouth;
    private JDialog saveDialog;
    private JScrollPane scrollPaneSelectedItems;
    private JSplitPane splitPaneMapFileExplorer;
    private About about;
    // End of variables declaration                   
}
