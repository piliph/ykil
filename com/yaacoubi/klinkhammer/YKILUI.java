/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.yaacoubi.klinkhammer;

import javax.swing.JOptionPane;
import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwindx.examples.util.ScreenShotAction;

/**
 *
 * @author m.yaacoubi
 */
public class YKILUI extends javax.swing.JFrame
{
    private DisplayManager displayman;
    private int dividerLocation = 200;
    protected WorldWindowGLCanvas map = null;
    /**
     * Creates new form MPImageLocatorUI
     */
    public YKILUI()
    {
        boolean win = System.getProperty("os.name").toLowerCase().contains("windows");
        String fs = System.getProperty("file.separator");
        String[] bins = {"gluegen-rt","jogl","jogl_awt","jogl_cg"};
        java.io.File f = null;
        String binpath = win?(System.getProperty("java.home")+fs+"bin"+fs):"/usr/lib/";
        String binWord = win?"binaries":"libraries";
        String result = "Following " + binWord + " are missing:\n\n";
        String binurl = "http://klinkhammer.yaacoubi.com/lib/" + (win?"win":"unix");
        String tmpFile = "";
        boolean missing = false;
        for(String bin : bins)
        {
            tmpFile  = win?"":"lib";
            tmpFile += bin+".";
            tmpFile += win?"dll":"so";
            f = new java.io.File(binpath+tmpFile);
            if(!f.exists())
            {
                    missing = true;
                    result += " - " + tmpFile + "\n";
            }
        }
        result += "\nYou can download all the necessary " + binWord + " at:\n\n"+binurl+"\n\nAfter downloading your needed " + binWord + ", make sure to copy them to the following path:\n\n" + binpath;
        if(missing)
        {
            message(capitalize(binWord) + " missing", result);
            Browser.goTo(binurl);
        }

        //  This line is neccessary due to the fact that the MapCanvas overlaps the MenuBar.
        //  Must be called before using Menus.
        javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        
        //  General Initialize Method, to initialize Components
        initComponents();

        //  Set the Program Icon of this Application
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/ykil.png")));
        
        //  Initialize Display Manager to manage Fullscreen Possibilities
        displayman = new DisplayManager(this);
    }

    private String capitalize(String line)
    {
        return Character.toUpperCase(line.charAt(0)) + line.substring(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {

        saveDialog = new javax.swing.JDialog();
        fileChooser = new javax.swing.JFileChooser();
        panelNorth = new javax.swing.JPanel();
        splitPaneMapFileExplorer = new javax.swing.JSplitPane();
        panelMap = new javax.swing.JPanel();
        panelFileExplorer = new javax.swing.JPanel();
        scrollPaneSelectedItems = new javax.swing.JScrollPane();
        listSelectedItems = new javax.swing.JList();
        panelSouth = new javax.swing.JPanel();
        buttonShowOnMap = new javax.swing.JButton();
        buttonExportImg = new javax.swing.JButton();
        buttonExportGPSData = new javax.swing.JButton();
        buttonAddImgToList = new javax.swing.JButton();
        buttonRemImgFromList = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuItemFullscreen = new javax.swing.JRadioButtonMenuItem();
        menuItemFullscreenX = new javax.swing.JRadioButtonMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuViewDesign = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();
        menuHelpOnlineSupport = new javax.swing.JMenuItem();
        menuHelpReportIssue = new javax.swing.JMenuItem();
        menuHelpAbout = new javax.swing.JMenuItem();

        saveDialog.setBounds(new java.awt.Rectangle(0, 0, 250, 200));
        saveDialog.getContentPane().add(fileChooser, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("YKIL - Yaacoubi Klinkhammer Image Locator");
        setMinimumSize(new java.awt.Dimension(900, 450));
        setName("mainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 450));
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });

        panelNorth.setLayout(new java.awt.BorderLayout());

        splitPaneMapFileExplorer.setDividerLocation(getWidth()-dividerLocation);
        splitPaneMapFileExplorer.setResizeWeight(1.0);
        splitPaneMapFileExplorer.setToolTipText("");
        splitPaneMapFileExplorer.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                splitPaneMapFileExplorerPropertyChange(evt);
            }
        });

        panelMap.setMinimumSize(new java.awt.Dimension(72, 200));
        panelMap.setName(""); // NOI18N
        panelMap.setLayout(new java.awt.BorderLayout());
        splitPaneMapFileExplorer.setLeftComponent(panelMap);
        map = Logik.getMap();
        if(map != null)
        panelMap.add(map, java.awt.BorderLayout.CENTER);

        panelFileExplorer.setLayout(new java.awt.BorderLayout());

        scrollPaneSelectedItems.setViewportView(listSelectedItems);

        panelFileExplorer.add(scrollPaneSelectedItems, java.awt.BorderLayout.PAGE_END);
        panelFileExplorer.add(new FileTreePanel(), java.awt.BorderLayout.CENTER);

        splitPaneMapFileExplorer.setRightComponent(panelFileExplorer);

        panelNorth.add(splitPaneMapFileExplorer, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelNorth, java.awt.BorderLayout.CENTER);

        panelSouth.setLayout(new java.awt.GridLayout(1, 0));

        buttonShowOnMap.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonShowOnMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/locate.png"))); // NOI18N
        buttonShowOnMap.setText("Locate");
        buttonShowOnMap.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonShowOnMapActionPerformed(evt);
            }
        });
        panelSouth.add(buttonShowOnMap);

        buttonExportImg.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonExportImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/map.png"))); // NOI18N
        buttonExportImg.setText("Export Map");
        buttonExportImg.addActionListener(new ScreenShotAction((WorldWindowGLCanvas)panelMap.getComponents()[0]));
        panelSouth.add(buttonExportImg);

        buttonExportGPSData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonExportGPSData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/gps.png"))); // NOI18N
        buttonExportGPSData.setText("Export GPS");
        buttonExportGPSData.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonExportGPSDataActionPerformed(evt);
            }
        });
        panelSouth.add(buttonExportGPSData);

        buttonAddImgToList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonAddImgToList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/add.png"))); // NOI18N
        buttonAddImgToList.setText("Add To List");
        panelSouth.add(buttonAddImgToList);

        buttonRemImgFromList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonRemImgFromList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yaacoubi/klinkhammer/images/del.png"))); // NOI18N
        buttonRemImgFromList.setText("Remove");
        panelSouth.add(buttonRemImgFromList);

        getContentPane().add(panelSouth, java.awt.BorderLayout.SOUTH);

        menuFile.setText("File");

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuView.setText("View");
        menuView.addMenuListener(new javax.swing.event.MenuListener()
        {
            public void menuCanceled(javax.swing.event.MenuEvent evt)
            {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt)
            {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt)
            {
                menuViewMenuSelected(evt);
            }
        });

        menuItemFullscreen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        menuItemFullscreen.setText("Fullscreen");
        menuItemFullscreen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                menuItemFullscreenActionPerformed(evt);
            }
        });
        menuView.add(menuItemFullscreen);

        menuItemFullscreenX.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        menuItemFullscreenX.setText("Fullscreen Extended");
        menuItemFullscreenX.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                menuItemFullscreenXActionPerformed(evt);
            }
        });
        menuView.add(menuItemFullscreenX);
        menuView.add(jSeparator1);

        menuViewDesign.setText("Design");

        setDesigns();

        menuView.add(menuViewDesign);

        menuBar.add(menuView);

        menuHelp.setText("Help");

        menuHelpOnlineSupport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuHelpOnlineSupport.setText("Online Help and Support");
        menuHelpOnlineSupport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                menuHelpOnlineSupportActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpOnlineSupport);

        menuHelpReportIssue.setText("Report Issue");
        menuHelpReportIssue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                menuHelpReportIssueActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpReportIssue);

        menuHelpAbout.setText("About");
        menuHelp.add(menuHelpAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        setSize(new java.awt.Dimension(931, 488));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void formComponentResized(java.awt.event.ComponentEvent evt)                                      
    {                                          
        // TODO add your handling code here:
        splitPaneMapFileExplorer.setDividerLocation(getWidth()-dividerLocation);
    }                                     

    private void splitPaneMapFileExplorerPropertyChange(java.beans.PropertyChangeEvent evt)                                                        
    {                                                            
        dividerLocation = getWidth()-splitPaneMapFileExplorer.getDividerLocation();
    }                                                       

    private void menuItemFullscreenActionPerformed(java.awt.event.ActionEvent evt)                                                   
    {                                                       
        // TODO add your handling code here:
        displayman.toggleFullscreen();
        menuItemFullscreenX.setSelected(displayman.isFullscreenX());
    }                                                  

    private void menuItemFullscreenXActionPerformed(java.awt.event.ActionEvent evt)                                                    
    {                                                        
        displayman.toggleFullscreenX();
        menuItemFullscreen.setSelected(displayman.isFullscreen());
    }                                                   

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt)                                             
    {                                                 
        // TODO add your handling code here:
        if(displayman.isFullscreen() || displayman.isFullscreenX())
            if(displayman.isFullscreen()) displayman.toggleFullscreen();
            else displayman.toggleFullscreenX();
        else
        {
            int answer = JOptionPane.showConfirmDialog(this, "Are you sure that you want to exit YKIL?", "Exit YKIL", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(answer == JOptionPane.YES_OPTION)
                System.exit(0);
        }
    }                                            

    private void menuViewMenuSelected(javax.swing.event.MenuEvent evt)                                      
    {                                          
        // TODO add your handling code here:
        boolean moreThanOne = DisplayManager.countDisplays() > 1;
        if(!menuItemFullscreenX.isEnabled() && moreThanOne) displayman.refreshDisplays();
        menuItemFullscreenX.setEnabled(moreThanOne);
        if(!moreThanOne) menuItemFullscreenX.setToolTipText("You need more than one monitor for this option.");
    }                                     

    private void menuHelpReportIssueActionPerformed(java.awt.event.ActionEvent evt)                                                    
    {                                                        
        // TODO add your handling code here:
    }                                                   

    private void menuHelpOnlineSupportActionPerformed(java.awt.event.ActionEvent evt)                                                      
    {                                                          
        // TODO add your handling code here:
        Browser.goTo("http://klinkhammer.yaacoubi.com");
    }                                                     

    private void buttonExportGPSDataActionPerformed(java.awt.event.ActionEvent evt)                                                    
    {                                                        
        // TODO add your handling code here:
        //Logik.exportEXIF();
        int returnval = fileChooser.showSaveDialog(this);
        if(returnval == javax.swing.JFileChooser.APPROVE_OPTION)
            Logik.exportEXIF(listSelectedItems.getSelectedValuesList(), fileChooser.getSelectedFile());
    }                                                   

    private void buttonShowOnMapActionPerformed(java.awt.event.ActionEvent evt)                                                
    {                                                    
        // TODO add your handling code here:
        Logik.addAnnotations(listSelectedItems.getSelectedValuesList(), this);
    }                                               

    public void message(String title, String msg)
    {
        JOptionPane.showMessageDialog(null,msg,title, JOptionPane.DEFAULT_OPTION);
    }

    private void setDesigns()
    {
        javax.swing.JRadioButtonMenuItem tmp;   
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
        {
            tmp = new javax.swing.JRadioButtonMenuItem();
            tmp.setSelected(javax.swing.UIManager.getLookAndFeel().getName().equals(info.getName()));
            tmp.setText(info.getName());
            tmp.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    menuItemDesignActionPerformed(evt);
                }
            });
            menuViewDesign.add(tmp);
        }
    }
    
    private void menuItemDesignActionPerformed(java.awt.event.ActionEvent evt)                                                      
    {                                                          
        // TODO add your handling code here:
        //message("Design", evt.getActionCommand());
        try {
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (evt.getActionCommand().equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.SwingUtilities.updateComponentTreeUI(this);
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.Component[] allDesigns = menuViewDesign.getMenuComponents();
        javax.swing.JRadioButtonMenuItem tmpMenuItem = null;
        for(java.awt.Component tmp : allDesigns)
        {
            tmpMenuItem = (javax.swing.JRadioButtonMenuItem)tmp;
            tmpMenuItem.setSelected(evt.getActionCommand().equals(tmpMenuItem.getText()));
        }
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YKILUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run()
            {
                new YKILUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton buttonAddImgToList;
    private javax.swing.JButton buttonExportGPSData;
    private javax.swing.JButton buttonExportImg;
    private javax.swing.JButton buttonRemImgFromList;
    private javax.swing.JButton buttonShowOnMap;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JList listSelectedItems;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuHelpAbout;
    private javax.swing.JMenuItem menuHelpOnlineSupport;
    private javax.swing.JMenuItem menuHelpReportIssue;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JRadioButtonMenuItem menuItemFullscreen;
    private javax.swing.JRadioButtonMenuItem menuItemFullscreenX;
    private javax.swing.JMenu menuView;
    private javax.swing.JMenu menuViewDesign;
    private javax.swing.JPanel panelFileExplorer;
    private javax.swing.JPanel panelMap;
    private javax.swing.JPanel panelNorth;
    private javax.swing.JPanel panelSouth;
    private javax.swing.JDialog saveDialog;
    private javax.swing.JScrollPane scrollPaneSelectedItems;
    private javax.swing.JSplitPane splitPaneMapFileExplorer;
    // End of variables declaration                   
}
